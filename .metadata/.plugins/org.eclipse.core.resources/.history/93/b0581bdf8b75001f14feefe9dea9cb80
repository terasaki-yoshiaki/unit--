package com.example.demo;


import java.sql.Connection;
import java.sql.DriverManager;

import org.dbunit.DatabaseTestCase;
import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.ITable;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.ext.mysql.MySqlMetadataHandler;
import org.dbunit.operation.DatabaseOperation;
import org.junit.Test;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;


@Transactional
@Rollback
public class inserttest extends DatabaseTestCase {

    private IDataSet backupDataSet; // 元のデータをバックアップするための変数

    // データベース接続を取得
    @Override
    protected IDatabaseConnection getConnection() throws Exception {
        // JDBCの接続情報
        Connection jdbcConnection = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/sample1", // データベース名
            "root", // ユーザー名
            "root"  // パスワード
        );
        IDatabaseConnection con = new DatabaseConnection(jdbcConnection, "sample1");

        // MySQLのメタデータハンドラを設定
        con.getConfig().setProperty(DatabaseConfig.PROPERTY_METADATA_HANDLER, new MySqlMetadataHandler());
        return con;
    }

    // 初期データセットを定義（テストに使用するデータ）
    @Override
    protected IDataSet getDataSet() throws Exception {
        return new FlatXmlDataSetBuilder().build(
            getClass().getClassLoader().getResourceAsStream("staff_initial_data.xml")
        );
    }

    // テスト前に現在のデータをバックアップ
    @Override
    protected void setUp() throws Exception {
        IDatabaseConnection connection = getConnection();

        // "staff" テーブルをバックアップ
        backupDataSet = connection.createDataSet(new String[] { "staff" });

        // 親クラスのsetUp()を呼び出して、テスト用データの挿入を行う
        super.setUp();
    }

    // テスト前にテストデータを挿入（INSERTを使用してデータを追加する）
    @Override
    protected DatabaseOperation getSetUpOperation() throws Exception {
        return DatabaseOperation.INSERT; // データを追加のみする
    }

    // テスト後にバックアップデータをリストア
    @Override
    protected void tearDown() throws Exception {
        IDatabaseConnection connection = getConnection();

        // テストデータを削除
        DatabaseOperation.DELETE_ALL.execute(connection, getDataSet());

        // バックアップデータを元に戻す
        DatabaseOperation.CLEAN_INSERT.execute(connection, backupDataSet);

        // 親クラスのtearDown()を呼び出して後処理を行う
        super.tearDown();
    }

    // テストメソッド
    @Test
    public void testStaffTable() throws Exception {
        IDatabaseConnection connection = getConnection();

        // STAFFテーブルのデータを取得
        ITable actualTable = connection.createQueryTable("staff", "SELECT * FROM staff");

        // 実際のテーブルと期待するデータが一致するか確認
        ITable expectedTable = getDataSet().getTable("staff");

        // テストのアサーション
        assertEquals(expectedTable.getRowCount(), actualTable.getRowCount());
    }
}
